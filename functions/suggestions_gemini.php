<?php
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST');
header('Access-Control-Allow-Headers: Content-Type');

// Set timezone to Asia/Manila
date_default_timezone_set('Asia/Manila');

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Only POST requests are allowed']);
    exit;
}

$input = json_decode(file_get_contents('php://input'), true);
$jobTitle = $input['jobTitle'] ?? null;
$field = $input['field'] ?? null; // 'requirements' or 'qualifications'

if (!$jobTitle) {
    http_response_code(400);
    echo json_encode(['error' => 'Job title is required']);
    exit;
}

if (!in_array($field, ['requirements', 'qualifications'])) {
    http_response_code(400);
    echo json_encode(['error' => 'Invalid field specified']);
    exit;
}

// Your API Key and Endpoint
$api_key = 'AIzaSyC5LRDr-q8eDfLMFe_QOA8GmLCzF-Qo6dU';
$endpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=' . $api_key;

// Refined prompt for concise, JSON-formatted output
$prompt = "Act as an HR manager. For a '$jobTitle' role, provide exactly 20 concise $field as a JSON array of strings. Return only the JSON array, e.g., [\"Item 1\", \"Item 2\"]. Ensure the output is valid JSON.";

$data = [
    'contents' => [
        'parts' => [
            ['text' => $prompt]
        ]
    ],
    'generationConfig' => [
        'temperature' => 0.7,
        'maxOutputTokens' => 1000, // Increased to ensure full response
        'responseMimeType' => 'application/json'
    ]
];

$ch = curl_init($endpoint);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
curl_setopt($ch, CURLOPT_HTTPHEADER, ['Content-Type: application/json']);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($httpCode !== 200) {
    // Log the raw response for debugging
    error_log("Gemini API Error (HTTP $httpCode): " . $response);
    http_response_code($httpCode);
    echo json_encode(['error' => 'API Error', 'details' => $response]);
    exit;
}

$responseData = json_decode($response, true);
if (json_last_error() !== JSON_ERROR_NONE) {
    error_log("Invalid JSON from Gemini API: " . $response);
    echo json_encode(['error' => 'Invalid JSON from API', 'raw' => $response]);
    exit;
}

$generatedText = $responseData['candidates'][0]['content']['parts'][0]['text'] ?? null;

if (!$generatedText) {
    error_log("No text generated by Gemini API: " . json_encode($responseData));
    echo json_encode(['error' => 'No text generated']);
    exit;
}

// Attempt to parse the generated text as JSON
$suggestions = json_decode($generatedText, true);

if (json_last_error() !== JSON_ERROR_NONE) {
    // Fallback suggestions if AI response is invalid
    $fallbackSuggestions = [
        'requirements' => [
            'Bachelor\'s degree in relevant field',
            '3+ years of experience in related role',
            'Proficiency in relevant tools/technologies',
            'Strong communication skills'
        ],
        'qualifications' => [
            'Experience with industry-standard software',
            'Ability to work in a team environment',
            'Strong problem-solving skills',
            'Relevant certifications preferred'
        ]
    ];
    error_log("Invalid JSON from AI: " . $generatedText);
    echo json_encode([
        'success' => true,
        'suggestions' => $fallbackSuggestions[$field],
        'warning' => 'Used fallback suggestions due to invalid AI response'
    ]);
    exit;
}

// Validate that suggestions is an array
if (!is_array($suggestions)) {
    error_log("AI response is not an array: " . $generatedText);
    echo json_encode(['error' => 'AI response is not a valid array', 'raw' => $generatedText]);
    exit;
}

// Send back the array of suggestions
echo json_encode([
    'success' => true,
    'suggestions' => array_slice($suggestions, 0, 20) // Ensure no more than 20 suggestions
]);
?>